//
//  QuoteyStyleKit.swift
//  Quotey
//
//  Created by MordechaiLev on 11/26/14.
//  Copyright (c) 2014 Martini. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class QuoteyStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfCanvas1: UIImage?
        static var canvas1Targets: [AnyObject]?
        static var imageOfCanvas2: UIImage?
        static var canvas2Targets: [AnyObject]?
        static var imageOfRectangle8: UIImage?
        static var rectangle8Targets: [AnyObject]?
        static var imageOfCanvas3: UIImage?
        static var canvas3Targets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawCanvas1() {
        //// Color Declarations
        let color2 = UIColor(red: 0.191, green: 0.866, blue: 0.388, alpha: 1.000)
        let color0 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Page-1
        //// iPhone-6-1x
        //// Oval-1-+-Fill-273
        //// Group 4
        //// Oval-1 Drawing
        var oval1Path = UIBezierPath(ovalInRect: CGRectMake(-0.23, -0, 71, 71))
        color0.setFill()
        oval1Path.fill()


        //// Fill-273 Drawing
        var fill273Path = UIBezierPath()
        fill273Path.moveToPoint(CGPointMake(36.68, 28.29))
        fill273Path.addLineToPoint(CGPointMake(35.77, 29.38))
        fill273Path.addLineToPoint(CGPointMake(34.87, 28.36))
        fill273Path.addCurveToPoint(CGPointMake(29.21, 26), controlPoint1: CGPointMake(33.27, 26.83), controlPoint2: CGPointMake(31.46, 26))
        fill273Path.addCurveToPoint(CGPointMake(23.24, 28.35), controlPoint1: CGPointMake(26.95, 26), controlPoint2: CGPointMake(24.83, 26.83))
        fill273Path.addCurveToPoint(CGPointMake(20.77, 34.03), controlPoint1: CGPointMake(21.65, 29.87), controlPoint2: CGPointMake(20.77, 31.89))
        fill273Path.addCurveToPoint(CGPointMake(23.24, 39.71), controlPoint1: CGPointMake(20.77, 36.18), controlPoint2: CGPointMake(21.65, 38.2))
        fill273Path.addLineToPoint(CGPointMake(34.44, 50.47))
        fill273Path.addCurveToPoint(CGPointMake(35.77, 51), controlPoint1: CGPointMake(34.79, 50.81), controlPoint2: CGPointMake(35.27, 51))
        fill273Path.addCurveToPoint(CGPointMake(37.1, 50.47), controlPoint1: CGPointMake(36.27, 51), controlPoint2: CGPointMake(36.75, 50.81))
        fill273Path.addLineToPoint(CGPointMake(48.3, 39.72))
        fill273Path.addCurveToPoint(CGPointMake(50.77, 34.03), controlPoint1: CGPointMake(49.89, 38.2), controlPoint2: CGPointMake(50.77, 36.18))
        fill273Path.addCurveToPoint(CGPointMake(48.3, 28.35), controlPoint1: CGPointMake(50.77, 31.89), controlPoint2: CGPointMake(49.89, 29.87))
        fill273Path.addCurveToPoint(CGPointMake(42.33, 26), controlPoint1: CGPointMake(46.71, 26.83), controlPoint2: CGPointMake(44.59, 26))
        fill273Path.addCurveToPoint(CGPointMake(36.68, 28.29), controlPoint1: CGPointMake(40.08, 26), controlPoint2: CGPointMake(38.27, 26.77))
        fill273Path.closePath()
        fill273Path.miterLimit = 4;

        fill273Path.usesEvenOddFillRule = true;

        color2.setFill()
        fill273Path.fill()
    }

    public class func drawCanvas2() {
        //// Color Declarations
        let color0 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color = UIColor(red: 0.987, green: 0.173, blue: 0.215, alpha: 1.000)

        //// Page-1
        //// iPhone-6-1x
        //// Oval-1-+-Fill-185
        //// Group 4
        //// Oval-1 Drawing
        var oval1Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 71, 71))
        color0.setFill()
        oval1Path.fill()


        //// Fill-185 Drawing
        var fill185Path = UIBezierPath()
        fill185Path.moveToPoint(CGPointMake(38.62, 35.5))
        fill185Path.addLineToPoint(CGPointMake(47.35, 44.24))
        fill185Path.addCurveToPoint(CGPointMake(48, 45.79), controlPoint1: CGPointMake(47.75, 44.63), controlPoint2: CGPointMake(48, 45.18))
        fill185Path.addCurveToPoint(CGPointMake(45.79, 48), controlPoint1: CGPointMake(48, 47.01), controlPoint2: CGPointMake(47.01, 48))
        fill185Path.addCurveToPoint(CGPointMake(44.23, 47.35), controlPoint1: CGPointMake(45.19, 48), controlPoint2: CGPointMake(44.63, 47.75))
        fill185Path.addLineToPoint(CGPointMake(35.5, 38.62))
        fill185Path.addLineToPoint(CGPointMake(26.77, 47.35))
        fill185Path.addCurveToPoint(CGPointMake(25.21, 48), controlPoint1: CGPointMake(26.37, 47.75), controlPoint2: CGPointMake(25.82, 48))
        fill185Path.addCurveToPoint(CGPointMake(23, 45.79), controlPoint1: CGPointMake(23.99, 48), controlPoint2: CGPointMake(23, 47.01))
        fill185Path.addCurveToPoint(CGPointMake(23.65, 44.24), controlPoint1: CGPointMake(23, 45.18), controlPoint2: CGPointMake(23.25, 44.63))
        fill185Path.addLineToPoint(CGPointMake(32.38, 35.5))
        fill185Path.addLineToPoint(CGPointMake(23.65, 26.76))
        fill185Path.addCurveToPoint(CGPointMake(23, 25.21), controlPoint1: CGPointMake(23.25, 26.37), controlPoint2: CGPointMake(23, 25.82))
        fill185Path.addCurveToPoint(CGPointMake(25.21, 23), controlPoint1: CGPointMake(23, 23.99), controlPoint2: CGPointMake(23.99, 23))
        fill185Path.addCurveToPoint(CGPointMake(26.77, 23.65), controlPoint1: CGPointMake(25.82, 23), controlPoint2: CGPointMake(26.37, 23.25))
        fill185Path.addLineToPoint(CGPointMake(35.5, 32.38))
        fill185Path.addLineToPoint(CGPointMake(44.23, 23.65))
        fill185Path.addCurveToPoint(CGPointMake(45.79, 23), controlPoint1: CGPointMake(44.63, 23.25), controlPoint2: CGPointMake(45.19, 23))
        fill185Path.addCurveToPoint(CGPointMake(48, 25.21), controlPoint1: CGPointMake(47.01, 23), controlPoint2: CGPointMake(48, 23.99))
        fill185Path.addCurveToPoint(CGPointMake(47.35, 26.76), controlPoint1: CGPointMake(48, 25.82), controlPoint2: CGPointMake(47.75, 26.37))
        fill185Path.addLineToPoint(CGPointMake(38.62, 35.5))
        fill185Path.closePath()
        fill185Path.miterLimit = 4;

        fill185Path.usesEvenOddFillRule = true;

        color.setFill()
        fill185Path.fill()
    }

    public class func drawRectangle8() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color0 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color3 = UIColor(red: 0.902, green: 0.902, blue: 0.902, alpha: 1.000)

        //// Gradient Declarations
        let linearGradient1 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color0.CGColor, color3.CGColor], [0, 1])

        //// Page-1
        //// iPhone-6-1x
        //// Rectangle-8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRectMake(0, 0, 375, 668))
        CGContextSaveGState(context)
        rectangle8Path.addClip()
        CGContextDrawLinearGradient(context, linearGradient1,
            CGPointMake(375, 0),
            CGPointMake(0, 668),
            UInt32(kCGGradientDrawsBeforeStartLocation) | UInt32(kCGGradientDrawsAfterEndLocation))
        CGContextRestoreGState(context)
    }

    public class func drawCanvas3() {
        //// Color Declarations
        let color4 = UIColor(red: 0.293, green: 0.561, blue: 0.949, alpha: 1.000)

        //// Page-2
        //// iPhone-6-1x-2
        //// Group 4
        //// Rectangle-18 Drawing
        var rectangle18Path = UIBezierPath()
        rectangle18Path.moveToPoint(CGPointMake(8.92, 11.1))
        rectangle18Path.addLineToPoint(CGPointMake(1.41, 3.6))
        rectangle18Path.addCurveToPoint(CGPointMake(1.41, 1.61), controlPoint1: CGPointMake(0.87, 3.05), controlPoint2: CGPointMake(0.86, 2.16))
        rectangle18Path.addCurveToPoint(CGPointMake(3.4, 1.61), controlPoint1: CGPointMake(1.96, 1.06), controlPoint2: CGPointMake(2.85, 1.07))
        rectangle18Path.addLineToPoint(CGPointMake(10.9, 9.12))
        rectangle18Path.addLineToPoint(CGPointMake(18.4, 1.61))
        rectangle18Path.addCurveToPoint(CGPointMake(20.39, 1.61), controlPoint1: CGPointMake(18.95, 1.07), controlPoint2: CGPointMake(19.84, 1.06))
        rectangle18Path.addCurveToPoint(CGPointMake(20.39, 3.6), controlPoint1: CGPointMake(20.94, 2.16), controlPoint2: CGPointMake(20.93, 3.05))
        rectangle18Path.addLineToPoint(CGPointMake(12.88, 11.1))
        rectangle18Path.addLineToPoint(CGPointMake(20.39, 18.6))
        rectangle18Path.addCurveToPoint(CGPointMake(20.39, 20.59), controlPoint1: CGPointMake(20.93, 19.15), controlPoint2: CGPointMake(20.94, 20.04))
        rectangle18Path.addCurveToPoint(CGPointMake(18.4, 20.59), controlPoint1: CGPointMake(19.84, 21.14), controlPoint2: CGPointMake(18.95, 21.13))
        rectangle18Path.addLineToPoint(CGPointMake(10.9, 13.08))
        rectangle18Path.addLineToPoint(CGPointMake(3.4, 20.59))
        rectangle18Path.addCurveToPoint(CGPointMake(1.41, 20.59), controlPoint1: CGPointMake(2.85, 21.13), controlPoint2: CGPointMake(1.96, 21.14))
        rectangle18Path.addCurveToPoint(CGPointMake(1.41, 18.6), controlPoint1: CGPointMake(0.86, 20.04), controlPoint2: CGPointMake(0.87, 19.15))
        rectangle18Path.addLineToPoint(CGPointMake(8.92, 11.1))
        rectangle18Path.closePath()
        rectangle18Path.miterLimit = 4;

        rectangle18Path.usesEvenOddFillRule = true;

        color4.setFill()
        rectangle18Path.fill()
    }

    //// Generated Images

    public class var imageOfCanvas1: UIImage {
        if Cache.imageOfCanvas1 != nil {
            return Cache.imageOfCanvas1!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(71, 71), false, 0)
            QuoteyStyleKit.drawCanvas1()

        Cache.imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas1!
    }

    public class var imageOfCanvas2: UIImage {
        if Cache.imageOfCanvas2 != nil {
            return Cache.imageOfCanvas2!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(71, 71), false, 0)
            QuoteyStyleKit.drawCanvas2()

        Cache.imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas2!
    }

    public class var imageOfRectangle8: UIImage {
        if Cache.imageOfRectangle8 != nil {
            return Cache.imageOfRectangle8!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(375, 668), false, 0)
            QuoteyStyleKit.drawRectangle8()

        Cache.imageOfRectangle8 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRectangle8!
    }

    public class var imageOfCanvas3: UIImage {
        if Cache.imageOfCanvas3 != nil {
            return Cache.imageOfCanvas3!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 22), false, 0)
            QuoteyStyleKit.drawCanvas3()

        Cache.imageOfCanvas3 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas3!
    }

    //// Customization Infrastructure

    @IBOutlet var canvas1Targets: [AnyObject]! {
        get { return Cache.canvas1Targets }
        set {
            Cache.canvas1Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(QuoteyStyleKit.imageOfCanvas1)
            }
        }
    }

    @IBOutlet var canvas2Targets: [AnyObject]! {
        get { return Cache.canvas2Targets }
        set {
            Cache.canvas2Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(QuoteyStyleKit.imageOfCanvas2)
            }
        }
    }

    @IBOutlet var rectangle8Targets: [AnyObject]! {
        get { return Cache.rectangle8Targets }
        set {
            Cache.rectangle8Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(QuoteyStyleKit.imageOfRectangle8)
            }
        }
    }

    @IBOutlet var canvas3Targets: [AnyObject]! {
        get { return Cache.canvas3Targets }
        set {
            Cache.canvas3Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(QuoteyStyleKit.imageOfCanvas3)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
